---
Name: Google Calendar
Description: Tools for interacting with a user's Google Calendar account
Metadata: bundle: true
Share Tools: List Events, Get Event, Move Event, Quick Add Event, Create Event, Update Event, Respond To Event, Delete Event, List Recurring Event Instances, List Calendars, Get Calendar, Create Calendar, Update Calendar, Delete Calendar

---
Name: List Events
Description: Retrieves events from a Google Calendar. By default, it sets `time_min` to the current time, returning all upcoming and recurring events scheduled for the future.
Credential: ./credential
Share Context: Google Calendar Context
Param: calendar_id: (Required) ID of the calendar to list events from. Set to `primary` to list events from the primary calendar.
Param: event_type: (Optional) Type of events to list. Valid options are: birthday, default, focusTime, fromGmail, outOfOffice, workingLocation. If not set, will list all events.
Param: single_event: (Optional) Whether to list only single event. Defaults to false.
Param: time_min: (Optional) Upper bound (exclusive) for an event's start time to filter by. Optional. The default is the current time.  Must be an RFC3339 timestamp with mandatory time zone offset.
Param: time_max: (Optional) Lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset.
Param: max_results: (Optional) Maximum number of events to return. It must be a positive integer. The default value is 250.
Param: order_by: (Optional) Order by which to sort events. Valid options are: updated. If set, results will be returned in ascending order. The default value is an unspecified stable order.
Param: q: (Optional) Free text search terms to find events by.

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/main.py list_events

---
Name: Get Event
Description: Get details of a specific event
Credential: ./credential
Share Context: Google Calendar Context
Param: calendar_id: (Required) ID of the calendar to get event from. Set to `primary` to get event from the primary calendar.
Param: event_id: (Required) ID of the event to get details of

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/main.py get_event

---
Name: Move Event
Description: Move an event to a different calendar
Credential: ./credential
Share Context: Google Calendar Context
Param: calendar_id: (Required) ID of the calendar to move event from.
Param: event_id: (Required) ID of the event to move.
Param: new_calendar_id: (Required) ID of the calendar to move the event to.

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/main.py move_event

---
Name: Quick Add Event
Description: Quickly add an event to a google calendar based on a simple text string
Credential: ./credential
Share Context: Google Calendar Context
Param: calendar_id: (Required) ID of the calendar to add event to. Set to `primary` to add event to the primary calendar.
Param: text: (Required) Text string to add to the calendar.

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/main.py quick_add_event

---
Name: Create Event
Description: Create a new event in a google calendar. The event type is always set to "default".
Credential: ./credential
Share Context: Google Calendar Context
Param: calendar_id: (Required) ID of the calendar to create event in. Set to `primary` to create event in the primary calendar.
Param: summary: (Optional) Title of the event to create. Defaults to "My Event"
Param: location: (Optional) Geographic location of the event as free-form text. Defaults to ""
Param: description: (Optional) Description of the event to create. Defaults to ""
Param: time_zone: (Optional) Time zone of the event to create. Defaults to the user's timezone. Must be a valid IANA timezone string.
Param: start_date: (Optional) The date, in the format "yyyy-mm-dd", only used if this is an all-day event.
Param: start_datetime: (Optional) Start date and time of the event to create. Must be a valid RFC 3339 formatted date/time string. A time zone offset is required unless a time zone is explicitly specified in timeZone.
Param: end_date: (Optional) The date, in the format "yyyy-mm-dd", if this is an all-day event.
Param: end_datetime: (Optional) End date and time of the event to create. Must be a valid RFC 3339 formatted date/time string. A time zone offset is required unless a time zone is explicitly specified in timeZone.
Param: attendees: (Optional) A comma separated list of email addresses of the attendees.
Param: recurrence: (Optional) A JSON array of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field, because they are already specified in the start_datetime and end_datetime fields.

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/main.py create_event


---
Name: Update Event
Description: Updates an existing event in a Google Calendar. Only the event organizer is allowed to make changes. Only the fields that are provided will be updated.
Credential: ./credential
Share Context: Google Calendar Context
Param: calendar_id: (Required) ID of the calendar to update event in.
Param: event_id: (Required) ID of the event to update
Param: summary: (Optional) Title of the event to update.
Param: location: (Optional) Geographic location of the event as free-form text.
Param: description: (Optional) Description of the event to update.
Param: time_zone: (Optional) Time zone of the event to update.
Param: start_date: (Optional) The date, in the format "yyyy-mm-dd", only used if this is an all-day event.
Param: start_datetime: (Optional) Start date and time of the event to update. Must be a valid RFC 3339 formatted date/time string. A time zone offset is required unless a time zone is explicitly specified in timeZone.
Param: end_date: (Optional) The date, in the format "yyyy-mm-dd", if this is an all-day event.
Param: end_datetime: (Optional) End date and time of the event to update. Must be a valid RFC 3339 formatted date/time string. A time zone offset is required unless a time zone is explicitly specified in timeZone.
Param: add_attendees: (Optional) A comma separated list of email addresses of the attendees. This will add the new attendees to the existing attendees list.
Param: replace_attendees: (Optional) A comma separated list of email addresses of the attendees. This is only valid when add_attendees is empty. This will replace the existing attendees list with the new list.
Param: recurrence: (Optional) A JSON array of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field, because they are already specified in the start_datetime and end_datetime fields.

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/main.py update_event

---
Name: Delete Event
Description: Delete an existing event from a google calendar
Credential: ./credential
Share Context: Google Calendar Context
Param: calendar_id: (Required) ID of the calendar to delete event from.
Param: event_id: (Required) ID of the event to delete

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/main.py delete_event

---
Name: List Recurring Event Instances
Description: List all instances of a recurring event
Credential: ./credential
Share Context: Google Calendar Context
Param: calendar_id: (Required) ID of the calendar to list instances from.
Param: event_id: (Required) ID of the recurring event to list instances of.
Param: time_min: (Optional) Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time.  Must be an RFC3339 timestamp with mandatory time zone offset.
Param: time_max: (Optional) Lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset.

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/main.py list_recurring_event_instances

---
Name: Respond To Event
Description: Respond to an Google Calendar event invitation.
Credential: ./credential
Share Context: Google Calendar Context
Param: calendar_id: (Required) ID of the calendar to respond to event in.
Param: event_id: (Required) ID of the event to respond to.
Param: response: (Required) Response to the event invitation. Must be one of 'accepted', 'declined', or 'tentative'.

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/main.py respond_to_event

---
Name: List Calendars
Description: List all google calendars for the user
Credential: ./credential
Share Context: Google Calendar Context

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/main.py list_calendars

---
Name: Get Calendar
Description: Get details of a specific google calendar
Credential: ./credential
Share Context: Google Calendar Context
Param: calendar_id: (Required) ID of the calendar to get details of

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/main.py get_calendar

---
Name: Create Calendar
Description: Create a new google calendar
Credential: ./credential
Share Context: Google Calendar Context
Param: summary: (Required) Title of the calendar to create.
Param: time_zone: (Optional) Time zone of the calendar to create. Default is the user's timezone, if the user's timezone is not known, it will be set to UTC.

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/main.py create_calendar

---
Name: Update Calendar
Description: Update an existing google calendar. Only the fields that are provided will be updated.
Credential: ./credential
Share Context: Google Calendar Context
Param: calendar_id: (Required) ID of the calendar to update
Param: summary: (Optional) Title of the calendar to update.
Param: time_zone: (Optional) Time zone of the calendar to update.
Param: location: (Optional) Geographic location of the calendar as free-form text to update.
Param: description: (Optional) Description of the calendar to update.

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/main.py update_calendar

---
Name: Delete Calendar
Description: Delete an existing google calendar
Credential: ./credential
Share Context: Google Calendar Context
Param: calendar_id: (Required) ID of the calendar to delete

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/main.py delete_calendar

---
Name: Google Calendar Context
Type: context
Share Context: ../../time

#!sys.echo

## Instructions for Using Google Calendar Tools

You have access to tools for interacting with the Google Calendar API. 

KEY guidelines to follow when handling dates and times:
- Relative Dates: Interpret relative terms like "today," "tomorrow," or "last week" based on the current date in the user's preferred timezone.
- Event Creation & Modification: Assume that any dates or times provided by the user are in their preferred timezone unless explicitly stated otherwise.
- Timezone Conversion: Ensure all dates and times are accurately converted to and from the user's preferred timezone when displaying or processing them.
- Event Grouping: When listing events from multiple calendars or groups, group them by the calendar owner and label each group with the owner's name so the user can easily identify the source of each event.

Many of the tools require the use of RFC3339 formatted date/time strings -- for example, 2025-03-12T10:00:00-07:00, 2024-01-27T10:00:00Z. 

If displaying recurring events, kindly remind the user that recurring events are included and will continue to appear in future listings, as they are scheduled to repeat over time.

## End of instructions for Using Google Calendar Tools

---
!metadata:*:icon
/admin/assets/google_calendar_icon_2020.png

---
!metadata:*:oauth
google-calendar