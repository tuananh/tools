Name: Browser
Description: Tools to navigate websites using a browser.
Metadata: bundle: true
Metadata: noUserAuth: sys.model.provider.credential
Credentials: github.com/gptscript-ai/credentials/model-provider
Share Tools: Browse, Get Page Contents, Filter, Fill, Enter, Scroll, Back, Forward, Screenshot, Download File From URL

---
Name: Get Page Contents
Share Context: Browser Context
Tools: service
Description: Returns the content of a website in Markdown format.
Params: website: (optional) The HTTPS URL of the website to visit. If unspecified, the current tab will be used.
Params: tabID: (optional) The ID of the tab. If unspecified, a new tab will be created.
Params: followMode: (optional) If true, the tool will produce a screenshot of the final page state. Defaults to false.

#!http://service.daemon.gptscript.local/getPageContents

---
Name: Browse
Metadata: index: false
Share Context: Browser Context
Tools: service
Description: Navigates to a website, but does not return the content.
Params: website: (required) The URL of the website to visit. Must be an HTTPS URL.
Params: tabID: (optional) The ID of the tab. If unspecified, a new tab will be created, and its ID will be returned.
Params: followMode: (optional) If true, the tool will produce a screenshot of the final page state. Defaults to false.

#!http://service.daemon.gptscript.local/browse

---
Name: Filter
Metadata: index: false
Share Context: Browser Context
Tools: service
Description: filter the page to get elements based on specific id, html tag, or class.
Params: filter: (required) the class (eg. '.foo') or id (eg. '#foo') of an object.
Params: tabID: (required) The ID of the tab to filter contents of.
Tools: service

#!http://service.daemon.gptscript.local/getFilteredContent

---
Name: Fill
Metadata: index: false
Metadata: noUserAuth: sys.model.provider.credential
Credentials: github.com/gptscript-ai/credentials/model-provider
Share Context: Browser Context
Tools: service
Description: Fills text into an element on the web page. Useful for filling out forms and other input fields.
Params: userInput: (required) Description of the element to fill. This will be used by the AI to determine which element to pick from the results. Be as detailed as possible.
Params: keywords: (required) Comma-separated list of keywords related to the element. These will be used to search for the element on the page. ALWAYS include at least one keyword.
Params: matchTextOnly: (optional, default false) Matches elements based on their text content and ignores their attributes. Useful for cases where the user has provided an exact piece of text that they want to interact with on the page.
Params: content: The text to fill into the element.
Params: tabID: (required) The ID of the tab.
Params: followMode: (optional) If true, the tool will produce a screenshot of the final page state. Defaults to false.
Tools: service

#!http://service.daemon.gptscript.local/fill

---
Name: Enter
Metadata: index: false
Share Context: Browser Context
Tools: service
Description: Presses the enter key. Useful after filling out a form or other input.
Params: tabID: (required) The ID of the tab.
Params: followMode: (optional) If true, the tool will produce a screenshot of the final page state. Defaults to false.
Tools: service

#!http://service.daemon.gptscript.local/enter

---
Name: Scroll
Metadata: index: false
Share Context: Browser Context
Tools: service
Description: Scrolls to the bottom of the page, possibly loading more content. Useful for sites like Reddit which support infinite scroll.
Params: tabID: (required) The ID of the tab.
Params: followMode: (optional) If true, the tool will produce a screenshot of the final page state. Defaults to false.
Tools: service

#!http://service.daemon.gptscript.local/scrollToBottom

---
Name: Screenshot
Metadata: index: false
Share Context: Browser Context
Tools: service
Description: Take a screenshot of the given tabID
Params: tabID: (required) The ID of the tab.
Params: fullPage: (optional) Take a full page screenshot. Defaults to false, which takes a screenshot of the current viewport.

#!http://service.daemon.gptscript.local/screenshot

---
Name: Back
Metadata: index: false
Share Context: Browser Context
Tools: service
Description: Navigates to back to the previous site in history.
Params: tabID: (required) The ID of the tab.
Params: followMode: (optional) If true, the tool will produce a screenshot of the final page state. Defaults to false.
Tools: service

#!http://service.daemon.gptscript.local/back

---
Name: Forward
Share Context: Browser Context
Tools: service
Description: Navigates to forward to the next site in history.
Params: tabID: (required) The ID of the tab.
Params: followMode: (optional) If true, the tool will produce a screenshot of the final page state. Defaults to false.
Tools: service

#!http://service.daemon.gptscript.local/forward

---
Name: Download File From URL
Share Context: Download File From URL Context
Tools: service
Description: Downloads a binary file from an HTTP/HTTPS URL and saves it to the workspace.
Params: url: (required) The URL of the file to download.
Params: fileName: (required) The name of the workspace file to save the content to.

#!http://service.daemon.gptscript.local/download

---
Name: Download File From URL Context
Metadata: index: false
Type: context

#!sys.echo

START TOOL USAGE: Download File From URL

The `Download File From URL` tool saves the content from a file at an HTTP or HTTPS URL to a file in the workspace.
The tool returns A JSON object that contains the `url`, `resolvedUrl`, `contentType`, `workspaceFile`, and `downloadedAt` fields. The `resolvedUrl` is the final URL after any redirects.
Do not attempt to link to a `workspaceFile` when displaying the results of a `Download` tool call.

END TOOL USAGE: Download File From URL

---
Name: Browser Context
Metadata: index: false
Type: context
Share Context: Current Date and Time from ../time

#!sys.echo

START TOOL USAGE: The `tabID` parameter

You can create new tabs with the `Browse` or `Get Page Contents` tools by passing them a `website` and omitting the `tabID`.
You can reuse an existing tab by passing the `tabID` of the tab you want to reuse.
Each browser tab has mutable state that changes with every tool call that uses its `tabID`.
Do not make parallel tool calls with the same `tabID`.
Browser tabs are ephemeral and will be closed after 10 minutes of inactivity. Do not reuse a tab if the last tool call with its `tabID` finished more than 10 minutes ago.

END TOOL USAGE: The `tabID` parameter

START TOOL USAGE: The `followMode` parameter

Every tool that takes a `followMode` parameter will return a screenshot when `followMode=true`.

When "follow mode" is enabled by the user, you must ALWAYS set `followMode=true` for EVERY tool call until "follow mode" is explicitly disabled by the user.

While "follow mode" is enabled, do not make parallel tool calls. Execute each tool call synchronously, waiting for each to complete before making the next call.

END TOOL USAGE: The `followMode` parameter

START TOOL USAGE: The `screenshotInfo` response field

Tools can return JSON objects containing a `screenshotInfo` field indicating that a screenshot of the page was taken.

This field is an object that contains the `tabID`, `tabPageUrl`, `takenAt`, `imageWorkspaceFile`, and `imageDownloadUrl` of a screenshot.

Screenshots can only be displayed to the user by embedding their `imageDownloadUrl` in markdown; e.g. `![screenshot](${imageDownloadUrl})`

When the `screenshotInfo` field is present in tool response, ALWAYS stop what you're doing and display the respective screenshot to the user immediately before continuing.

END TOOL USAGE: The `screenshotInfo` response field

---
Name: service
Metadata: requestedEnvVars: OPENAI_API_KEY,OPENAI_BASE_URL
Metadata: index: false

#!sys.daemon /usr/bin/env npm --prefix ${GPTSCRIPT_TOOL_DIR} run server

---
!metadata:*:icon
/admin/assets/chromium_icon.svg
